[["index.html", "Tijs Gems Chapter 1 Index", " Tijs Gems Tijs Van den Heuvel 2021-10-25 Chapter 1 Index This is a portfolio website. "],["p5-projects.html", "Chapter 2 P5 projects 2.1 Goldberg Polyhedron 2.2 Cylinder robot arm 2.3 Evolution 1: smart rockets 2.4 Evolution 2: evolutionary system 2.5 Ant simulation 2.6 Big Tree 2.7 Info Vis", " Chapter 2 P5 projects These are some visualizations I made with P5 2.1 Goldberg Polyhedron This is a project to calculate the coordinates and create a visualization of a (4,0) Goldberg polyhedron. A Goldberg polyhedron is the dual of an icosphere, which is created by subdividing and rounding off an icosahedron. More info… wikipedia: Goldberg polyhedron Platonic solids by Paul Bourke vertex coordinates source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/goldberg_polyhedron/&quot;,height = &quot;777px&quot;) 2.2 Cylinder robot arm This is a visualization of the movement of a cylindrical robot arm with a variable amount of modules. It is generated with relative coordinates. I have not fully succeeded in calculating the absolute coordinates of the key points. I would need a better grasp of linear algebra and rotation matrices. More info… wikipedia: Rotation matrix source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/cylinder_robot_arm/&quot;,height = &quot;600px&quot;) 2.3 Evolution 1: smart rockets This is a simple example of an evolutionary algorithm. The rockets learn to reach the target by reproducing and evolving. A rocket has an array of vectors as its DNA and every frame it applies the next vector. We start with a genetic pool of 200 different random rockets. Every 400 frames, the fitness of each rocket is calculated by how close it is to the target. A new population is constructed by mating random rockets from the population with randomly chosen genes from one or the other. The fitter a rocket is, the higher chance it has to be chosen as a mate More info… wikipedia: Evolutionary algorithm The tutorial I followed source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/evolution1&quot;,height = &quot;800px&quot;) 2.4 Evolution 2: evolutionary system This is a simple example of an evolutionary system. The rockets try to survive by seeking and eating food. The faster a rocket goes, the faster it dies. If a rocket has enough health it can reproduce. The rockets have DNA consisting of color, maxspeed (length), maxforce. The color is to illustrate genetic variation. Food particles are randomly generated and also left when a rocket dies. You can add a predator to see how it impacts the system. More info… wikipedia: Evolutionary systems Inspiration video source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/evolution2&quot;,height = &quot;750px&quot;) 2.5 Ant simulation This is an attempt to simulate ant-like behavior and emergent patterns. The ant try to find the food and when they found it they bring it back to the colony. The ants search the food by random walks and following pheromones left by other ants. The steering behavior of this simulation is very rudimentary and can be optimized in the future. This simulation was inspired by this video by Sebastion Lague More info… source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/antsim&quot;,height = &quot;777px&quot;) 2.6 Big Tree This is an attempt to simulate growing a tree. This project is at a very early stage at the moment. There will be expanded on this in the future. More info… source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/bigtree&quot;,height = &quot;777px&quot;) 2.7 Info Vis This is an experiment in text information structure visualisation. There will be expanded on this in the future. the “vis” button and text input do not work atm. You can click the “none” button and press space to traverse a sample text document. The sliders change various sizes of network elements. More info… source code knitr::include_url(&quot;https://tijsvandenheuvel.github.io/p5/infovis&quot;,height = &quot;777px&quot;) "],["machine-learning-notebooks.html", "Chapter 3 Machine learning notebooks 3.1 connect-4 Reinforcement learning 3.2 Predicting Absenteeism 3.3 Tweet analysis and emoji prediction 3.4 Wikipedia hyperlink network", " Chapter 3 Machine learning notebooks 3.1 connect-4 Reinforcement learning This project was a personal introduction to Reinforcement learning. It uses the environment from the connect-x kaggle challenge I haven’t gone much further than trying to get it to work based on notebooks published by others in the kaggle challenge. open notebook 3.2 Predicting Absenteeism This project was the final assignment for the course AI principles by David D’Haese from the AP University College Antwerp The goal of this data analysis report is to predict if an employee will be absent often based on variables of the Absenteeism At Work dataset, with a focus on feature contribution. open notebook 3.3 Tweet analysis and emoji prediction This report describes the results of a research to predict emotion from tweets. More in particular the goal of this project was to predict an emoji based on text from a tweet. open notebook 3.4 Wikipedia hyperlink network In this project is a study in - pyspark - data (network) visualization. data source source: Jure Leskovec, Stanford University This is a web graph of Wikipedia hyperlinks collected in September 2011. The network was constructed by first taking the largest strongly connected component of Wikipedia, then restricting to pages in the top set of categories (those with at least 100 pages), and finally taking the largest strongly connected component of the restricted graph. open notebook "],["code-ref.html", "Chapter 4 coding reference 4.1 Python 4.2 HTML", " Chapter 4 coding reference This is just an experiment in how Bookdown works but can become useful in the future 4.1 Python 4.1.1 Pandas 4.1.1.1 get not empty rows df.loc[~df[&#39;col&#39;].isnull()] 4.1.1.2 Convert column to datetime df[&#39;datetime&#39;]=pd.to_datetime(df[&#39;timestring&#39;]) 4.1.1.3 Get rows where column matches string df.loc[df[&#39;column_name&#39;] == &#39;string&#39;] 4.1.1.4 Get rows where column contains string df.loc[df[&#39;column_name&#39;].str.contains(&#39;string&#39;)] 4.1.1.5 iterate rows dataframe for row in df.iterrows(): print(row) 4.2 HTML 4.2.1 radio button group &lt;form&gt; &lt;fieldset id=&quot;group1&quot;&gt; &lt;input type=&quot;radio&quot; value=&quot;&quot;&gt; &lt;input type=&quot;radio&quot; value=&quot;&quot;&gt; &lt;/fieldset&gt; &lt;fieldset id=&quot;group2&quot;&gt; &lt;input type=&quot;radio&quot; value=&quot;&quot;&gt; &lt;input type=&quot;radio&quot; value=&quot;&quot;&gt; &lt;input type=&quot;radio&quot; value=&quot;&quot;&gt; &lt;/fieldset&gt; &lt;/form&gt; 4.2.2 Space &amp;nbsp; "]]
